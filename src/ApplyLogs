# Prerequisites: Ensure necessary Azure modules are installed and imported
Install-Module -Name Az -AllowClobber -Force -Scope CurrentUser
Import-Module Az.Monitor -Force
Import-Module Az.Compute -Force
Import-Module Az.OperationalInsights -Force

# Global variables setup (adjust these as per your environment)
$resourceGroupName = "Andre-AzureMonitor"
$workspaceName = "amworkspace"
$jsonConfigPath = "C:\Ascott557\azure-monitor\src\monitoringConfig.json"
$actionGroupId = "prototype" # Update this placeholder with your Action Group ID

# Retrieve workspace details
$workspace = Get-AzOperationalInsightsWorkspace -ResourceGroupName $resourceGroupName -Name $workspaceName

# Function to apply metric-based alerts
function Apply-MetricAlert {
    param (
        [string]$resourceId,
        [pscustomobject]$config,
        [string]$actionGroupId
    )

    $windowSize = "PT" + $config.frequencyInMinutes + "M"
    $evaluationFrequency = "PT" + $config.frequencyInMinutes + "M"

    $condition = New-AzMetricAlertRuleV2Criteria -MetricName $config.metricName `
        -Operator $config.operator -Threshold $config.threshold `
        -TimeAggregation $config.timeAggregation

    New-AzMetricAlertRuleV2 -Name $config.name `
        -ResourceGroupName (Get-AzResource -ResourceId $resourceId).ResourceGroupName `
        -WindowSize $windowSize -Frequency $evaluationFrequency `
        -TargetResourceId $resourceId -Criteria $condition `
        -ActionGroupId $actionGroupId -Severity $config.severity `
        -Description $config.description

    Write-Host "Metric alert `"$($config.name)`" has been applied to $resourceId"
}

# Load JSON configurations
$configs = Get-Content -Path $jsonConfigPath | ConvertFrom-Json

# Iterate over configurations and apply them
foreach ($configGroup in $configs.monitoringConfigurations) {
    $taggedResources = Get-AzResource -Tag @{ Monitor = "Enabled" } | Where-Object { $_.Type -eq $configGroup.resourceType }

    foreach ($resource in $taggedResources) {
        foreach ($config in $configGroup.configurations) {
            if ($config.type -eq "metric") {
                Apply-MetricAlert -resourceId $resource.Id -config $config -actionGroupId $actionGroupId
            } elseif ($config.type -eq "log") {
                # Placeholder for applying log-based monitoring using KQL queries
                # Extend this section with a similar function for log alerts
                Write-Host "Applying log alert for $($config.description) to $($resource.Name)"
            }
        }
    }
}

Write-Host "Monitoring configuration process completed."
